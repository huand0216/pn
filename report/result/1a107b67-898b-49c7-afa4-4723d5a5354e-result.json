{"name": "test_order[data0]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '\"errCode\":0' in '{\"errCode\":80000,\"msg\":\"未找到询价单\"}'", "trace": "self = <tests.test_3_order.TestOrder object at 0x7faec1527df0>\ndata = {'caseID': 'case014', '描述': '查看询价单详情', '操作方（修理厂/供应商）': 'repair_shopToken', '请求参数': 'case014', ...}\nrepair_shopToken = 'Bearer d3f10ae07ea9a5183157f38a2e653486245ff18c'\nsupplierToken = 'Bearer c5a877124b63f1c5352a8fb995e1f4c69a1cb6e4'\n\n    @pytest.mark.parametrize(\n        \"data\",excelData\n    )\n    def test_order(self,data,repair_shopToken,supplierToken):\n        caseId = data[OperationExcel.caseId]\n        url = data[OperationExcel.caseUrl]\n        method = data[OperationExcel.caseMethod]\n        # 判断取买家token还是卖家token\n        if data[OperationExcel.caseOperator] == \"repair_shopToken\":\n            headers = {\"Authorization\": repair_shopToken}\n        elif data[OperationExcel.caseOperator] == \"supplierToken\":\n            headers = {\"Authorization\": supplierToken}\n        jsonData = ExcelMappingYaml(filename=\"data.yaml\").get_mappingYaml(data[OperationExcel.caseParameter])\n        expect = data[OperationExcel.caseExpect]\n    \n        if caseId == \"case014\" and method == \"GET\":\n            # jsonData = ExcelMappingYaml(filename=\"data.yaml\").get_mappingYaml(data[OperationExcel.caseId])\n            res = My_request().GET(url=url, headers=headers, params=jsonData)\n            result = res.text\n    \n        if method == \"GET\":\n            res = My_request().GET(url=url,headers=headers,params=jsonData)\n            result = res.text\n    \n        elif method == \"POST\":\n            if caseId == \"case024\":\n                orderId = OperationYaml(filename=\"public.yaml\").readYamlDict()[\"orderId\"]\n                url = url + \"{0}\".format(orderId)    # 将case024拼接上orderId\n            res = My_request().POST(url=url,headers=headers,json=jsonData)\n            result = res.text\n            # 更新case018生成订单参数\n            if caseId == \"case017\":\n                modify_content = OperationYaml(filename=\"data.yaml\").readYamlDict()\n                addressId = res.json()[\"data\"][\"orgDeliveryDTOS\"][0][\"id\"]\n                orgId = res.json()[\"data\"][\"orgDeliveryDTOS\"][0][\"orgId\"]\n                partsList = modify_content[\"case016\"][\"partList\"]\n                modify_content[\"case018\"][\"id\"] = addressId\n                modify_content[\"case018\"][\"params\"][0][\"orgId\"] = orgId\n                modify_content[\"case018\"][\"params\"][0][\"parts\"] = partsList\n                OperationYaml(filename=\"data.yaml\").updateYaml(modifyItem=modify_content)\n            elif caseId == \"case018\":\n                # 更新case019获取支付信息参数\n                modify_data = OperationYaml(filename=\"data.yaml\").readYamlDict()\n                idList = res.json()[\"data\"][\"idList\"]\n                modify_data[\"case019\"][\"idList\"] = idList\n                modify_data[\"case023\"][\"orderId\"] = idList[0]\n                OperationYaml(filename=\"data.yaml\").updateYaml(modifyItem = modify_data)\n                # 更新最新订单id到public.yaml\n                modify_public = OperationYaml(filename=\"public.yaml\").readYamlDict()\n                modify_public[\"orderId\"] = idList[0]\n                OperationYaml(filename=\"public.yaml\").updateYaml(modifyItem = modify_public)\n    \n            elif caseId == \"case019\":\n                # 更新case022支付参数\n                modify_content = OperationYaml(filename=\"data.yaml\").readYamlDict()\n                ids = OperationYaml(filename=\"data.yaml\").readYamlDict()[\"case019\"][\"idList\"]\n                case019_result = res.json()\n                payMoney = str(case019_result[\"data\"][\"list\"][0][\"transportFee\"] + case019_result[\"data\"][\"list\"][0][\"subTotal\"])\n                if case019_result[\"data\"][\"accountPay\"] == 2:\n                    payType = 5   # 平台挂账\n                elif case019_result[\"data\"][\"accountPay\"] == 1:\n                    payType = 3   # 普通挂账\n                modify_content[\"case022\"][\"ids\"] = ids\n                modify_content[\"case022\"][\"payMoney\"] = payMoney\n                modify_content[\"case022\"][\"payType\"] = payType\n                getUrl_prefix = url.split(\".\")[0]\n                returnUrl = modify_content[\"case022\"][\"returnUrl\"]\n                new_returnUrl = returnUrl.replace(returnUrl.split(\".\")[0],getUrl_prefix)\n                modify_content[\"case022\"][\"returnUrl\"] = new_returnUrl   # 替换returnUrl前缀：url同步caseUrl替换成测试环境还是正式环境\n                OperationYaml(filename=\"data.yaml\").updateYaml(modifyItem=modify_content)\n    \n        # 对所有用例进行断言\n>       assert expect in result\nE       assert '\"errCode\":0' in '{\"errCode\":80000,\"msg\":\"未找到询价单\"}'\n\ntests/test_3_order.py:88: AssertionError"}, "parameters": [{"name": "data", "value": "{'caseID': 'case014', '描述': '查看询价单详情', '操作方（修理厂/供应商）': 'repair_shopToken', '请求方法': 'GET', '请求地址': 'https://www.daishupei.com/api/parts/web/inquiry/getInquiryInfo', '请求参数': 'case014', '预期结果': '\"errCode\":0'}"}], "start": 1624365292579, "stop": 1624365292829, "uuid": "21639aa1-821d-44c8-9689-4f384f914837", "historyId": "d29d36dadbb8bf2a0c926aee3f7a9c02", "testCaseId": "e62fb80e8ef455b343e2a3613fbcfa8c", "fullName": "tests.test_3_order.TestOrder#test_order", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_3_order"}, {"name": "subSuite", "value": "TestOrder"}, {"name": "host", "value": "MacBook-Pro-huand.local"}, {"name": "thread", "value": "32613-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_3_order"}]}