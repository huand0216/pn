{"name": "test_others[data4]", "status": "failed", "statusDetails": {"message": "AssertionError: assert 'true' in '{\"errCode\":91005,\"msg\":\"机构不存在\",\"data\":null}'", "trace": "self = <tests.test_5_others.Test_others object at 0x7fa6365e0e20>\ndata = {'caseID': 'case037', '描述': '新增常用供应商', '操作方（修理厂/供应商）': 'repair_shopToken', '请求参数': 'case037', ...}\nrepair_shopToken = 'Bearer e84ee1196fe24648b5cb3f5c2e7aa232372af8bf'\nsupplierToken = 'Bearer f743baa62ac2c6fcbe92f350d79709b3fc0db787'\n\n    @pytest.mark.parametrize(\n        \"data\",excelData\n    )\n    def test_others(self,data,repair_shopToken,supplierToken):\n        # 获取到请求需要的参数\n        caseId = data[OperationExcel.caseId]\n        url = data[OperationExcel.caseUrl]\n        method = data[OperationExcel.caseMethod]\n        remark = data[OperationExcel.caseRemarks]\n        operator = data[OperationExcel.caseOperator]\n        parameter = data[OperationExcel.caseParameter]  # 参数\n        expect = data[OperationExcel.caseExpect]\n    \n        if operator == \"repair_shopToken\":\n            headers = {\"Authorization\": repair_shopToken}\n        elif operator == \"supplierToken\":\n            headers = {\"Authorization\": supplierToken}\n        jsonData = ExcelMappingYaml(filename=\"data.yaml\").get_mappingYaml(parameter)\n        if caseId == \"case036\":\n            for i in range(3):\n                jsonData[\"matchType\"] = i+1\n                res = My_request().POST(url=url, headers=headers, json=jsonData)\n                result = res.text\n        elif caseId == \"case035\":\n            res = My_request().POST(url=url, headers=headers, params=jsonData)\n            result = res.text\n        elif caseId == \"case038\":\n            random_int = random.randint(00000000000,99999999999)\n            # 更新掉新增员工的手机号\n            jsonData[\"phone\"] = str(random_int)\n            res = My_request().POST(url=url, headers=headers, json=jsonData)\n            result = res.text\n            # 更新case039、case040的参数\n            del_id = res.json()[\"data\"]\n            modify_data = OperationYaml(filename=\"data.yaml\").readYamlDict()\n            modify_data[\"case039\"][\"id\"] = del_id     # 更新成要删除的id\n            modify_data[\"case040\"][\"oem\"] = str(random_int)\n            OperationYaml(filename=\"data.yaml\").updateYaml(modifyItem=modify_data)   # 更新\n    \n        elif method == \"GET\":\n            res = My_request().GET(url=url, headers=headers, params=jsonData)\n            result = res.text\n        elif method == \"POST\":\n            res = My_request().POST(url=url, headers=headers, json=jsonData)\n            result = res.text\n            # 更新case035的参数\n            if caseId == \"case034\":\n                delDeliveryId = res.json()[\"data\"][\"orgDeliveryDTOS\"][1][\"id\"]\n                modify_data = OperationYaml(filename=\"data.yaml\").readYamlDict()\n                modify_data[\"case035\"][\"id\"] = delDeliveryId\n                OperationYaml(filename=\"data.yaml\").updateYaml(modifyItem=modify_data)  # 更新\n        # 对所有用例进行断言\n>       assert expect in result\nE       assert 'true' in '{\"errCode\":91005,\"msg\":\"机构不存在\",\"data\":null}'\n\ntests/test_5_others.py:68: AssertionError"}, "parameters": [{"name": "data", "value": "{'caseID': 'case037', '描述': '新增常用供应商', '操作方（修理厂/供应商）': 'repair_shopToken', '请求方法': 'POST', '请求地址': 'https://www.daishupei.com/api/user/web/orgCollection/addCollectionOrg', '请求参数': 'case037', '预期结果': 'true'}"}], "start": 1624366340031, "stop": 1624366340269, "uuid": "555608a1-938c-439c-b314-499a89c170c8", "historyId": "865372f05cf06a1ca278211455095a77", "testCaseId": "e0a6576d79b1d17075b9133519975984", "fullName": "tests.test_5_others.Test_others#test_others", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_5_others"}, {"name": "subSuite", "value": "Test_others"}, {"name": "host", "value": "MacBook-Pro-huand.local"}, {"name": "thread", "value": "32994-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_5_others"}]}