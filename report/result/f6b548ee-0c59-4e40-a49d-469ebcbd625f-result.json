{"name": "test_return[data0]", "status": "broken", "statusDetails": {"message": "KeyError: 'data'", "trace": "self = <tests.test_4_return.Test_return object at 0x7f9123cdb670>\ndata = {'caseID': 'case025', '描述': '查看订单详情', '操作方（修理厂/供应商）': 'repair_shopToken', '请求参数': '', ...}\nrepair_shopToken = 'Bearer 48b1cd2e4c03bdeb83eee5913288e9594a0da8c5'\nsupplierToken = 'Bearer 6d8311814d17023d362e3edc72a35068f7381467'\n\n    @pytest.mark.parametrize(\n        \"data\",excelData\n    )\n    def test_return(self,data,repair_shopToken,supplierToken):\n        caseId = data[OperationExcel.caseId]\n        url = data[OperationExcel.caseUrl]\n        method = data[OperationExcel.caseMethod]\n        remark = data[OperationExcel.caseRemarks]\n        operator = data[OperationExcel.caseOperator]\n        parameter = data[OperationExcel.caseParameter]      #参数\n        expect = data[OperationExcel.caseExpect]\n    \n        if operator == \"repair_shopToken\":\n            headers = {\"Authorization\": repair_shopToken}\n        elif operator == \"supplierToken\":\n            headers = {\"Authorization\": supplierToken}\n        jsonData = ExcelMappingYaml(filename=\"data.yaml\").get_mappingYaml(parameter)\n    \n        # 发送请求\n        if (caseId == \"case030\" or caseId == \"case032\") and method == \"GET\":\n            # 将case030拼接上returnId\n            returnId = OperationYaml(filename=\"public.yaml\").readYamlDict()[\"returnId\"]\n            url = url + \"{0}\".format(returnId)\n            res = My_request().GET(url=url, headers=headers, params=jsonData)\n            result = res.text\n    \n        elif method == \"GET\":\n            if caseId == \"case025\":\n                orderId = OperationYaml(filename=\"public.yaml\").readYamlDict()[\"orderId\"]\n                url = url + \"{0}\".format(orderId)  # 将case025拼接上orderId\n            res = My_request().GET(url=url , headers=headers , params = jsonData)\n            result = res.text\n            # 更新case025申请退货参数\n            if caseId == \"case025\":\n                orderReturnDetailDTO = list()\n>               l = res.json()[\"data\"][\"orderDetailVOS\"]\nE               KeyError: 'data'\n\ntests/test_4_return.py:50: KeyError"}, "parameters": [{"name": "data", "value": "{'caseID': 'case025', '描述': '查看订单详情', '操作方（修理厂/供应商）': 'repair_shopToken', '请求方法': 'GET', '请求地址': 'https://www.daishupei.com/api/parts/web/order/creditOrder/', '请求参数': '', '预期结果': '\"errCode\":0'}"}], "start": 1624363911825, "stop": 1624363911919, "uuid": "35a5452c-f4a1-4146-807c-958302ec84c4", "historyId": "e9dedf88cb9bb50e6fa4ab7770602772", "testCaseId": "2cec80114e83e01afd23f7af313c2cb5", "fullName": "tests.test_4_return.Test_return#test_return", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_4_return"}, {"name": "subSuite", "value": "Test_return"}, {"name": "host", "value": "MacBook-Pro-huand.local"}, {"name": "thread", "value": "32101-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_4_return"}]}