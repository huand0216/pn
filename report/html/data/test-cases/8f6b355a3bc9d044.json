{
  "uid" : "8f6b355a3bc9d044",
  "name" : "test_return[data5]",
  "fullName" : "tests.test_4_return.Test_return#test_return",
  "historyId" : "0af0b64b40b593f4ce67b24699ec17e4",
  "time" : {
    "start" : 1624363912635,
    "stop" : 1624363912765,
    "duration" : 130
  },
  "status" : "failed",
  "statusMessage" : "AssertionError: assert 'true' in '{\"errCode\":18005,\"msg\":\"该退货单还未发货\"}'",
  "statusTrace" : "self = <tests.test_4_return.Test_return object at 0x7f9123e33a30>\ndata = {'caseID': 'case030', '描述': '供应商退货收货', '操作方（修理厂/供应商）': 'supplierToken', '请求参数': '', ...}\nrepair_shopToken = 'Bearer 48b1cd2e4c03bdeb83eee5913288e9594a0da8c5'\nsupplierToken = 'Bearer 6d8311814d17023d362e3edc72a35068f7381467'\n\n    @pytest.mark.parametrize(\n        \"data\",excelData\n    )\n    def test_return(self,data,repair_shopToken,supplierToken):\n        caseId = data[OperationExcel.caseId]\n        url = data[OperationExcel.caseUrl]\n        method = data[OperationExcel.caseMethod]\n        remark = data[OperationExcel.caseRemarks]\n        operator = data[OperationExcel.caseOperator]\n        parameter = data[OperationExcel.caseParameter]      #参数\n        expect = data[OperationExcel.caseExpect]\n    \n        if operator == \"repair_shopToken\":\n            headers = {\"Authorization\": repair_shopToken}\n        elif operator == \"supplierToken\":\n            headers = {\"Authorization\": supplierToken}\n        jsonData = ExcelMappingYaml(filename=\"data.yaml\").get_mappingYaml(parameter)\n    \n        # 发送请求\n        if (caseId == \"case030\" or caseId == \"case032\") and method == \"GET\":\n            # 将case030拼接上returnId\n            returnId = OperationYaml(filename=\"public.yaml\").readYamlDict()[\"returnId\"]\n            url = url + \"{0}\".format(returnId)\n            res = My_request().GET(url=url, headers=headers, params=jsonData)\n            result = res.text\n    \n        elif method == \"GET\":\n            if caseId == \"case025\":\n                orderId = OperationYaml(filename=\"public.yaml\").readYamlDict()[\"orderId\"]\n                url = url + \"{0}\".format(orderId)  # 将case025拼接上orderId\n            res = My_request().GET(url=url , headers=headers , params = jsonData)\n            result = res.text\n            # 更新case025申请退货参数\n            if caseId == \"case025\":\n                orderReturnDetailDTO = list()\n                l = res.json()[\"data\"][\"orderDetailVOS\"]\n                for i in range(len(l)-1):\n                    orderReturnDetail = {\"orderDetailId\": \"\", \"returnCount\": 1, \"backMoney\": 200, \"degreeVersion\": 1}\n                    orderReturnDetail[\"orderDetailId\"] = l[i][\"id\"]\n                    orderReturnDetail[\"returnCount\"] = l[i][\"partCount\"]\n                    orderReturnDetail[\"backMoney\"] = l[i][\"subtotal\"]\n                    orderReturnDetailDTO.append(orderReturnDetail)\n                modify_data = OperationYaml(filename=\"data.yaml\").readYamlDict()\n                modify_data[\"case026\"][\"orderReturnDetailDTO\"] = orderReturnDetailDTO  # 更新子订单orderReturnDetailDTO\n                modify_data[\"case026\"][\"orderId\"] = res.json()[\"data\"][\"orderMainVO\"][\"id\"]  # 更新主订单id\n                modify_data[\"case026\"][\"returnAmount\"] = res.json()[\"data\"][\"orderMainVO\"][\"finalPrice\"]  # 更新退货总金额\n                OperationYaml(filename=\"data.yaml\").updateYaml(modifyItem=modify_data)\n    \n        elif method == \"POST\":\n            res = My_request().POST(url=url,headers=headers,json=jsonData)\n            result = res.text\n            '''1.拿到退货单id更新到public.yaml\n            '''\n            if caseId == \"case026\":\n                returnId = res.json()[\"data\"]\n                modify_public = OperationYaml(filename=\"public.yaml\").readYamlDict()\n                modify_public[\"returnId\"] = returnId     # 替换掉旧退货单id\n                OperationYaml(filename=\"public.yaml\").updateYaml(modify_public)  # 更新\n    \n            # 更新case028退货审核参数,case029退货单发货id\n            elif caseId == \"case027\":\n                modify_data = OperationYaml(filename=\"data.yaml\").readYamlDict()\n                return_deliveryId = res.json()[\"data\"][\"orgDeliveryDTOS\"][0][\"id\"]\n                modify_data[\"case028\"][\"deliveryId\"] = return_deliveryId    # 替换收货地址id\n                returnId = OperationYaml(filename=\"public.yaml\").readYamlDict()[\"returnId\"]\n                modify_data[\"case028\"][\"id\"] = returnId# 替换掉旧退货单id\n                modify_data[\"case029\"][\"orderId\"] = returnId\n                OperationYaml(filename=\"data.yaml\").updateYaml(modify_data)   # 更新\n    \n    \n        # 对所有用例进行断言\n>       assert expect in result\nE       assert 'true' in '{\"errCode\":18005,\"msg\":\"该退货单还未发货\"}'\n\ntests/test_4_return.py:86: AssertionError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "_skip_sensitive",
    "time" : {
      "start" : 1624363912634,
      "stop" : 1624363912634,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sensitive_url",
    "time" : {
      "start" : 1624363901015,
      "stop" : 1624363901015,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1624363900546,
      "stop" : 1624363900546,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "supplierToken",
    "time" : {
      "start" : 1624363903607,
      "stop" : 1624363904086,
      "duration" : 479
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "repair_shopToken",
    "time" : {
      "start" : 1624363900547,
      "stop" : 1624363901015,
      "duration" : 468
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "base_url",
    "time" : {
      "start" : 1624363900546,
      "stop" : 1624363900546,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_4_return"
  }, {
    "name" : "subSuite",
    "value" : "Test_return"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro-huand.local"
  }, {
    "name" : "thread",
    "value" : "32101-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_4_return"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'caseID': 'case030', '描述': '供应商退货收货', '操作方（修理厂/供应商）': 'supplierToken', '请求方法': 'GET', '请求地址': 'https://www.daishupei.com/api/parts/web/orderReturn/confirmReceipt/', '请求参数': '', '预期结果': 'true'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "8f6b355a3bc9d044.json",
  "parameterValues" : [ "{'caseID': 'case030', '描述': '供应商退货收货', '操作方（修理厂/供应商）': 'supplierToken', '请求方法': 'GET', '请求地址': 'https://www.daishupei.com/api/parts/web/orderReturn/confirmReceipt/', '请求参数': '', '预期结果': 'true'}" ]
}