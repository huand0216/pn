{
  "uid" : "574a68b891e1d9d2",
  "name" : "test_order[data4]",
  "fullName" : "tests.test_3_order.TestOrder#test_order",
  "historyId" : "282ae75268b06ec34130141959f78863",
  "time" : {
    "start" : 1624366336200,
    "stop" : 1624366336410,
    "duration" : 210
  },
  "status" : "broken",
  "statusMessage" : "KeyError: 'data'",
  "statusTrace" : "self = <tests.test_3_order.TestOrder object at 0x7fa63658f700>\ndata = {'caseID': 'case018', '描述': '询价单生成订单', '操作方（修理厂/供应商）': 'repair_shopToken', '请求参数': 'case018', ...}\nrepair_shopToken = 'Bearer e84ee1196fe24648b5cb3f5c2e7aa232372af8bf'\nsupplierToken = 'Bearer f743baa62ac2c6fcbe92f350d79709b3fc0db787'\n\n    @pytest.mark.parametrize(\n        \"data\",excelData\n    )\n    def test_order(self,data,repair_shopToken,supplierToken):\n        caseId = data[OperationExcel.caseId]\n        url = data[OperationExcel.caseUrl]\n        method = data[OperationExcel.caseMethod]\n        # 判断取买家token还是卖家token\n        if data[OperationExcel.caseOperator] == \"repair_shopToken\":\n            headers = {\"Authorization\": repair_shopToken}\n        elif data[OperationExcel.caseOperator] == \"supplierToken\":\n            headers = {\"Authorization\": supplierToken}\n        jsonData = ExcelMappingYaml(filename=\"data.yaml\").get_mappingYaml(data[OperationExcel.caseParameter])\n        expect = data[OperationExcel.caseExpect]\n    \n        if caseId == \"case014\" and method == \"GET\":\n            # jsonData = ExcelMappingYaml(filename=\"data.yaml\").get_mappingYaml(data[OperationExcel.caseId])\n            res = My_request().GET(url=url, headers=headers, params=jsonData)\n            result = res.text\n    \n        if method == \"GET\":\n            res = My_request().GET(url=url,headers=headers,params=jsonData)\n            result = res.text\n    \n        elif method == \"POST\":\n            if caseId == \"case024\":\n                orderId = OperationYaml(filename=\"public.yaml\").readYamlDict()[\"orderId\"]\n                url = url + \"{0}\".format(orderId)    # 将case024拼接上orderId\n            res = My_request().POST(url=url,headers=headers,json=jsonData)\n            result = res.text\n            # 更新case018生成订单参数\n            if caseId == \"case017\":\n                modify_content = OperationYaml(filename=\"data.yaml\").readYamlDict()\n                addressId = res.json()[\"data\"][\"orgDeliveryDTOS\"][0][\"id\"]\n                orgId = res.json()[\"data\"][\"orgDeliveryDTOS\"][0][\"orgId\"]\n                partsList = modify_content[\"case016\"][\"partList\"]\n                modify_content[\"case018\"][\"id\"] = addressId\n                modify_content[\"case018\"][\"params\"][0][\"orgId\"] = orgId\n                modify_content[\"case018\"][\"params\"][0][\"parts\"] = partsList\n                OperationYaml(filename=\"data.yaml\").updateYaml(modifyItem=modify_content)\n            elif caseId == \"case018\":\n                # 更新case019获取支付信息参数\n                modify_data = OperationYaml(filename=\"data.yaml\").readYamlDict()\n>               idList = res.json()[\"data\"][\"idList\"]\nE               KeyError: 'data'\n\ntests/test_3_order.py:59: KeyError",
  "flaky" : false,
  "beforeStages" : [ {
    "name" : "base_url",
    "time" : {
      "start" : 1624366327181,
      "stop" : 1624366327181,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "supplierToken",
    "time" : {
      "start" : 1624366331815,
      "stop" : 1624366332297,
      "duration" : 482
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_verify_url",
    "time" : {
      "start" : 1624366327181,
      "stop" : 1624366327181,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "_skip_sensitive",
    "time" : {
      "start" : 1624366336199,
      "stop" : 1624366336199,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "sensitive_url",
    "time" : {
      "start" : 1624366327691,
      "stop" : 1624366327691,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  }, {
    "name" : "repair_shopToken",
    "time" : {
      "start" : 1624366327181,
      "stop" : 1624366327691,
      "duration" : 510
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 0,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : false,
    "hasContent" : false
  } ],
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "tests"
  }, {
    "name" : "suite",
    "value" : "test_3_order"
  }, {
    "name" : "subSuite",
    "value" : "TestOrder"
  }, {
    "name" : "host",
    "value" : "MacBook-Pro-huand.local"
  }, {
    "name" : "thread",
    "value" : "32994-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "tests.test_3_order"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'caseID': 'case018', '描述': '询价单生成订单', '操作方（修理厂/供应商）': 'repair_shopToken', '请求方法': 'POST', '请求地址': 'https://www.daishupei.com/api/parts/web/order/orderByInquiry', '请求参数': 'case018', '预期结果': '\"errCode\":0'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "574a68b891e1d9d2.json",
  "parameterValues" : [ "{'caseID': 'case018', '描述': '询价单生成订单', '操作方（修理厂/供应商）': 'repair_shopToken', '请求方法': 'POST', '请求地址': 'https://www.daishupei.com/api/parts/web/order/orderByInquiry', '请求参数': 'case018', '预期结果': '\"errCode\":0'}" ]
}